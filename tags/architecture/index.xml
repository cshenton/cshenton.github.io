<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Lean Data Guy</title>
    <link>http://leandataguy.com/tags/architecture/index.xml</link>
    <description>Recent content in Architecture on Lean Data Guy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>My Name</copyright>
    <atom:link href="http://leandataguy.com/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Data Warehouse is an Antipattern</title>
      <link>http://leandataguy.com/2017/03/04/whats-the-warehouse-for/</link>
      <pubDate>Sat, 04 Mar 2017 16:30:51 +1100</pubDate>
      
      <guid>http://leandataguy.com/2017/03/04/whats-the-warehouse-for/</guid>
      <description>

&lt;h1 id=&#34;data-plumbing&#34;&gt;Data Plumbing&lt;/h1&gt;

&lt;p&gt;From startups to enterprise, the term &amp;ldquo;Data Warehouse&amp;rdquo; has a sort of hallowed quality to it. It is, after all, where all that &lt;em&gt;valuable&lt;/em&gt; data foolishly discarded by operational systems ends up. It&amp;rsquo;s the only place to get a &lt;em&gt;360 degree customer view&lt;/em&gt; in an increasingly service-oriented world, and can even be used by those mysterious data scientists, or (if we&amp;rsquo;re so lucky), for doing &lt;strong&gt;BIG&lt;/strong&gt; Data.&lt;/p&gt;

&lt;p&gt;And whether you call it a data warehouse, a data lake, or a series of data marts; whether you&amp;rsquo;re getting the data there by ETL or ELT, the pattern&amp;rsquo;s much the same anywhere you go:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grab the binary logs / table extracts from your production databases&lt;/li&gt;
&lt;li&gt;Grab all the weblogs and 3rd party SaaS data&lt;/li&gt;
&lt;li&gt;(optional) transform it into a mostly logical data model&lt;/li&gt;
&lt;li&gt;Put it all in one place so it can be queried together&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although the first steps might be a bit trickier, say, if you&amp;rsquo;re using SAP business objects (my condolences) or there are some cowboys running Access databases in prod (my commiserations), the end result is much the same:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An expensive, specialised database which is miserably coupled to every data producing service in your company.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-monolith-returns&#34;&gt;The Monolith Returns&lt;/h1&gt;

&lt;p&gt;Which is exactly what we were trying to avoid when we organised operations as a series of interconnected services. The reason this is bad is that the data warehouse exists on the assumption that lots of people need it. Departmental reporting needs it, BI needs it, Analytics needs it, those Data Scientists need it. At the same time, since it is tightly coupled not just to one, but to multiple services, a single schema migration in an upstream service can easily frustrate or even break the efforts of those teams dependent on it.&lt;/p&gt;

&lt;h3 id=&#34;let-services-be-services&#34;&gt;Let Services be Services&lt;/h3&gt;

&lt;p&gt;However, the services whose production databases the warehouse replicates manage to avoid breaking after every database migration. This is because they operate on a fixed &lt;strong&gt;service contract&lt;/strong&gt;, usually in the form of a documented API that passes messages in JSON, or (if you like your APIs enterprisey) XML.&lt;/p&gt;

&lt;p&gt;This means that each service knows which resources and message schemas its consumers depend on, which enables it to make changes and add functionality with impunity, so long as that contract is maintained. This means that underlying database schemas, and even database and application runtimes can be changed without breaking anything.&lt;/p&gt;

&lt;p&gt;Without breaking anything, that is, except the data warehouse. By directly coupling to the database rather than the API, the warehouse breaks that service contract and makes itself more fragile as a service.&lt;/p&gt;

&lt;h1 id=&#34;what-s-to-be-done&#34;&gt;What&amp;rsquo;s to be Done?&lt;/h1&gt;

&lt;p&gt;This is a bad situation. In my current job, I&amp;rsquo;ve worked with analytics teams whose predictive models were frequently being broken by the very department that relied on them, and the root cause was that their source data was too tightly coupled to that department&amp;rsquo;s application database. However, I&amp;rsquo;ve also seen teams running analytical queries against operational databases, which is at best slow and at worse will break things.&lt;/p&gt;

&lt;p&gt;And the goals of warehousing data are good ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensuring no potentially valuable information is discarded by an operational system&lt;/li&gt;
&lt;li&gt;Unifying data across services to answer questions that can&amp;rsquo;t be answered through any single service API or database&lt;/li&gt;
&lt;li&gt;Being a go to point for data used for modelling purposes&lt;/li&gt;
&lt;li&gt;Providing database technologies optimised for analytical queries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So why are data warehouses a hornet&amp;rsquo;s nest of architectural antipatterns? Precisely because they try to solve all these important problems at once.&lt;/p&gt;

&lt;p&gt;Over the next few months, I&amp;rsquo;ll be breaking these goals down and looking at solutions that are a little less monolithic than a centralised data warehouse. When I do, I&amp;rsquo;ll be coming back and updating this article, which for now will have to settle for complaining about a problem without proposing a solution.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>